diff --git a/python/google/protobuf/json_format.py b/python/google/protobuf/json_format.py
index bb6a199..f760dc3 100644
--- a/python/google/protobuf/json_format.py
+++ b/python/google/protobuf/json_format.py
@@ -427,13 +427,23 @@ class _Parser(object):
               if item is None:
                 raise ParseError('null is not allowed to be used as an element'
                                  ' in a repeated field.')
-              getattr(message, field.name).append(
-                  _ConvertScalarFieldValue(item, field))
+              try:
+                getattr(message, field.name).append(
+                    _ConvertScalarFieldValue(item, field))
+              except ParseError as e:
+                if (field.cpp_type != descriptor.FieldDescriptor.CPPTYPE_ENUM or
+                    not self.ignore_unknown_fields):
+                  raise e
         elif field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_MESSAGE:
           sub_message = getattr(message, field.name)
           self.ConvertMessage(value, sub_message)
         else:
-          setattr(message, field.name, _ConvertScalarFieldValue(value, field))
+          try:
+            setattr(message, field.name, _ConvertScalarFieldValue(value, field))
+          except ParseError as e:
+            if (field.cpp_type != descriptor.FieldDescriptor.CPPTYPE_ENUM or
+                not self.ignore_unknown_fields):
+              raise e
       except ParseError as e:
         if field and field.containing_oneof is None:
           raise ParseError('Failed to parse {0} field: {1}'.format(name, e))
