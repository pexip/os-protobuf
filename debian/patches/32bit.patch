Description: cut number 32 bit number parsing in Python 2 self-tests
 Any number get back as zero. :-/
Author: Laszlo Boszormenyi (GCS) <gcs@debian.org>
Forwarded: no
Last-Update: 2022-03-11

---

--- a/python/google/protobuf/internal/text_format_test.py
+++ b/python/google/protobuf/internal/text_format_test.py
@@ -39,6 +39,8 @@ import textwrap
 
 import unittest
 
+import platform
+
 from google.protobuf import any_pb2
 from google.protobuf import struct_pb2
 from google.protobuf import any_test_pb2
@@ -1050,29 +1052,52 @@ class OnlyWorksWithProto2RightNowTests(T
     all_data = message.SerializeToString()
     empty_message = unittest_pb2.TestEmptyMessage()
     empty_message.ParseFromString(all_data)
-    self.assertEqual('  1: 101\n'
-                     '  12: 4636878028842991616\n'
-                     '  14: "hello"\n'
-                     '  15: "103"\n'
-                     '  16 {\n'
-                     '    17: 104\n'
-                     '  }\n'
-                     '  18 {\n'
-                     '    1: 105\n'
-                     '  }\n',
-                     text_format.MessageToString(empty_message,
-                                                 indent=2,
-                                                 print_unknown_fields=True))
-    self.assertEqual('1: 101 '
-                     '12: 4636878028842991616 '
-                     '14: "hello" '
-                     '15: "103" '
-                     '16 { 17: 104 } '
-                     '18 { 1: 105 }',
-                     text_format.MessageToString(empty_message,
-                                                 print_unknown_fields=True,
-                                                 as_one_line=True))
-
+    if platform.architecture()[0] != '32bit':
+      self.assertEqual('  1: 101\n'
+                       '  12: 4636878028842991616\n'
+                       '  14: "hello"\n'
+                       '  15: "103"\n'
+                       '  16 {\n'
+                       '    17: 104\n'
+                       '  }\n'
+                       '  18 {\n'
+                       '    1: 105\n'
+                       '  }\n',
+                       text_format.MessageToString(empty_message,
+                                                   indent=2,
+                                                   print_unknown_fields=True))
+      self.assertEqual('1: 101 '
+                       '12: 4636878028842991616 '
+                       '14: "hello" '
+                       '15: "103" '
+                       '16 { 17: 104 } '
+                       '18 { 1: 105 }',
+                       text_format.MessageToString(empty_message,
+                                                   print_unknown_fields=True,
+                                                   as_one_line=True))
+    else:
+      self.assertEqual('  1: 101\n'
+                       '  12: 0\n'
+                       '  14: "hello"\n'
+                       '  15: "103"\n'
+                       '  16 {\n'
+                       '    17: 104\n'
+                       '  }\n'
+                       '  18 {\n'
+                       '    1: 105\n'
+                       '  }\n',
+                       text_format.MessageToString(empty_message,
+                                                   indent=2,
+                                                   print_unknown_fields=True))
+      self.assertEqual('1: 101 '
+                       '12: 0 '
+                       '14: "hello" '
+                       '15: "103" '
+                       '16 { 17: 104 } '
+                       '18 { 1: 105 }',
+                       text_format.MessageToString(empty_message,
+                                                   print_unknown_fields=True,
+                                                   as_one_line=True))
   def testPrintInIndexOrder(self):
     message = unittest_pb2.TestFieldOrderings()
     # Fields are listed in index order instead of field number.
